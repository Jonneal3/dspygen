{
  "predictor": {
    "lm": null,
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "json_schema": "{\"properties\": {\"SKU\": {\"title\": \"SKU\", \"type\": \"string\"}, \"quantity\": {\"title\": \"Quantity\", \"type\": \"integer\"}, \"restockDate\": {\"format\": \"date\", \"title\": \"Restock Date\", \"type\": \"string\"}, \"supplier\": {\"title\": \"Supplier\", \"type\": \"string\"}}, \"required\": [\"SKU\", \"quantity\", \"restockDate\", \"supplier\"], \"title\": \"TobaccoInventoryUpdate\", \"type\": \"object\"}",
        "prompt": "[{'content': \"You are a helpful assistant that answers in JSON. Here's the json schema you must adhere to:\\n<schema>\\n{'properties': {'SKU': {'title': 'SKU', 'type': 'string'}, 'quantity': {'title': 'Quantity', 'type': 'integer'}, 'restockDate': {'format': 'date', 'title': 'Restock Date', 'type': 'string'}, 'supplier': {'title': 'Supplier', 'type': 'string'}}, 'required': ['SKU', 'quantity', 'restockDate', 'supplier'], 'title': 'TobaccoInventoryUpdate', 'type': 'object'}\\n<\/schema>\\n\", 'role': 'system'}, {'content': \"I'm managing the inventory for our tobacco products and need to update our system with the latest stock information. Could you assist me by generating a JSON output that includes the SKU, quantity, restockDate, and supplier for each product? Here are the details for the update: SKU: 'TOB-1928', quantity: 150, restockDate: '2023-04-15', supplier: 'Global Tobacco Ltd.' Please ensure the JSON output is structured according to the schema requirements.\", 'role': 'user'}]",
        "completion": "```json\n{\n  \"SKU\": \"TOB-1928\",\n  \"quantity\": 150,\n  \"restockDate\": \"2023-04-15\",\n  \"supplier\": \"Global Tobacco Ltd.\"\n}\n```"
      },
      {
        "augmented": true,
        "json_schema": "{\"title\": \"PrefabricatedHouseModel\", \"type\": \"object\", \"properties\": {\"modelName\": {\"title\": \"Model Name\", \"type\": \"string\"}, \"dimensions\": {\"title\": \"Dimensions\", \"type\": \"object\", \"properties\": {\"length\": {\"title\": \"Length\", \"type\": \"number\"}, \"width\": {\"title\": \"Width\", \"type\": \"number\"}, \"height\": {\"title\": \"Height\", \"type\": \"number\"}}, \"required\": [\"length\", \"width\", \"height\"]}, \"price\": {\"title\": \"Price\", \"type\": \"number\"}, \"features\": {\"title\": \"Features\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"modelName\", \"dimensions\", \"price\", \"features\"]}",
        "prompt": "[{'content': \"You are a helpful assistant that answers in JSON. Here's the json schema you must adhere to:\\n<schema>\\n{'title': 'PrefabricatedHouseModel', 'type': 'object', 'properties': {'modelName': {'title': 'Model Name', 'type': 'string'}, 'dimensions': {'title': 'Dimensions', 'type': 'object', 'properties': {'length': {'title': 'Length', 'type': 'number'}, 'width': {'title': 'Width', 'type': 'number'}, 'height': {'title': 'Height', 'type': 'number'}}, 'required': ['length', 'width', 'height']}, 'price': {'title': 'Price', 'type': 'number'}, 'features': {'title': 'Features', 'type': 'array', 'items': {'type': 'string'}}}, 'required': ['modelName', 'dimensions', 'price', 'features']}\\n<\/schema>\\n\", 'role': 'system'}, {'content': \"I'm interested in a prefabricated house model that's suitable for a small family. The model I have in mind is called 'EcoNest'. It should have a compact design with dimensions of 12 meters in length, 7 meters in width, and 3.5 meters in height. The price should be affordable, let's say around 75000 USD. For features, I would like it to include solar panels, a rainwater harvesting system, energy-efficient windows, and a modern kitchen. Could you please provide me with a valid JSON object for this prefabricated house model?\", 'role': 'user'}]",
        "completion": "```json\n{\n  \"modelName\": \"EcoNest\",\n  \"dimensions\": {\n    \"length\": 12,\n    \"width\": 7,\n    \"height\": 3.5\n  },\n  \"price\": 75000,\n  \"features\": [\n    \"solar panels\",\n    \"rainwater harvesting system\",\n    \"energy-efficient windows\",\n    \"modern kitchen\"\n  ]\n}\n```"
      },
      {
        "augmented": true,
        "json_schema": "{\"properties\": {\"seatNumber\": {\"type\": \"string\"}, \"serviceType\": {\"type\": \"string\"}, \"specialInstructions\": {\"type\": \"string\"}}, \"required\": [\"seatNumber\", \"serviceType\"], \"type\": \"object\"}",
        "prompt": "[{'content': \"You are a helpful assistant that answers in JSON. Here's the json schema you must adhere to:\\n<schema>\\n{'properties': {'seatNumber': {'type': 'string'}, 'serviceType': {'type': 'string'}, 'specialInstructions': {'type': 'string'}}, 'required': ['seatNumber', 'serviceType'], 'type': 'object'}\\n<\/schema>\\n\", 'role': 'system'}, {'content': \"I'm currently on flight LH210 and I'd like to request an in-flight service. My seat number is 12A. I would like to request a vegetarian meal as the service type. For special instructions, please ensure that the meal is gluten-free.\", 'role': 'user'}]",
        "completion": "```json\n{\n  \"seatNumber\": \"12A\",\n  \"serviceType\": \"vegetarian meal\",\n  \"specialInstructions\": \"gluten-free\"\n}\n```"
      },
      {
        "augmented": true,
        "json_schema": "{\"title\": \"ContainerProduct\", \"type\": \"object\", \"properties\": {\"productId\": {\"title\": \"Product ID\", \"type\": \"string\"}, \"materialType\": {\"title\": \"Material Type\", \"type\": \"string\", \"enum\": [\"metal\", \"glass\", \"plastic\"]}, \"dimensions\": {\"title\": \"Dimensions\", \"type\": \"object\", \"properties\": {\"height\": {\"title\": \"Height\", \"type\": \"number\"}, \"diameter\": {\"title\": \"Diameter\", \"type\": \"number\"}}, \"required\": [\"height\", \"diameter\"]}, \"capacity\": {\"title\": \"Capacity\", \"type\": \"number\"}}, \"required\": [\"productId\", \"materialType\", \"dimensions\", \"capacity\"]}",
        "prompt": "[{'content': \"You are a helpful assistant that answers in JSON. Here's the json schema you must adhere to:\\n<schema>\\n{'title': 'ContainerProduct', 'type': 'object', 'properties': {'productId': {'title': 'Product ID', 'type': 'string'}, 'materialType': {'title': 'Material Type', 'type': 'string', 'enum': ['metal', 'glass', 'plastic']}, 'dimensions': {'title': 'Dimensions', 'type': 'object', 'properties': {'height': {'title': 'Height', 'type': 'number'}, 'diameter': {'title': 'Diameter', 'type': 'number'}}, 'required': ['height', 'diameter']}, 'capacity': {'title': 'Capacity', 'type': 'number'}}, 'required': ['productId', 'materialType', 'dimensions', 'capacity']}\\n<\/schema>\\n\", 'role': 'system'}, {'content': \"I'm working on adding a new product to our inventory and need to generate a JSON object for it. The product is a container used for packaging beverages. Here are the details: The product ID is 'CNTR-001234', it's made of high-density polyethylene (HDPE), which is a type of plastic. The container has a height of 22 centimeters and a diameter of 6.5 centimeters. It's designed to hold up to 500 milliliters of liquid. Please respond with a valid JSON object that includes these properties.\", 'role': 'user'}]",
        "completion": "```json\n{\n  \"productId\": \"CNTR-001234\",\n  \"materialType\": \"plastic\",\n  \"dimensions\": {\n    \"height\": 22,\n    \"diameter\": 6.5\n  },\n  \"capacity\": 500\n}\n```"
      }
    ],
    "signature_instructions": "```json { \"prefix\": \"To construct a structured JSON object, start by identifying the main elements and key-value pairs in the text.\", \"extract_information\": \"Parse the given text for critical data points, categorizing them into appropriate keys like 'name', 'age', 'occupation', etc. In cases where information is unstructured, deduce meaningful tags to organize it within your JSON structure.\", \"validate_data\": \"Ensure all values adhere to their expected formats (e.g., alphanumeric for names, numerical for ages). Disregard extraneous content that does not contribute to the main objective of data representation.\", \"create_json_object\": \"Compose a valid JSON object encapsulating all relevant information in key-value pairs as cleanly as possible while avoiding unnecessary whitespace or newline characters.\" }, \"data_output\": { \/\/ No initial data provided, placeholder to be updated with extracted key-value pairs from the original text. }```json.dumps(data, separators=(',', ':'))",
    "signature_prefix": "```json\n{\n  \"$schema\": \"http:\/\/json-schema.org\/draft-07\/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"email\": {\"type\": \"string\", \"format\": \"email\"}\n  },\n  \"required\": [\"name\"]\n}\n```\n```json\n{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n}\n```\n"
  }
}